import { NextResult, Page, Result, ViewModel } from '@/infrastructure/bot/render/render-engine.js';
import {
  AssetIdSchema,
  DecimalNonNegSchema,
  DecimalPositiveSchema,
  UpdateMenuActionSchema,
} from '../validations.js';
import { UpdateCommandCtx, UpdateMenuAction } from './context.js';
import { Prisma, ValuationMode } from '@prisma/client';
import { prettyZodError } from '@/features/validation.js';
import { db } from '@/infrastructure/db/db.js';

export class AskAssetListPage implements Page<UpdateCommandCtx> {
  render(ctx: UpdateCommandCtx, error?: string): ViewModel {
    const nodes: ViewModel['nodes'] = [];
    nodes.push({ type: 'Title' as const, text: 'üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞' });
    nodes.push({
      type: 'Paragraph' as const,
      text:
        '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n' +
        '1) ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—É–º–º–∞ –æ—Ü–µ–Ω–∫–∏, –¥–æ–ª–≥)\n' +
        '2) üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤\n',
      // '3) ‚öôÔ∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–ª—è –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö/–∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤)',
    });
    nodes.push({
      type: 'Keyboard',
      rows: ctx.context.assets!.map((a) => [{ text: `${a.name}`, cb: `asset:${a.id}` }]),
    });
    if (error) nodes.push({ type: 'Error' as const, text: error });
    return { nodes };
  }

  handleInput(ctx: UpdateCommandCtx, input: string): Result {
    const v = AssetIdSchema.safeParse(input);
    if (!v.success) return { success: false, message: prettyZodError(v.error) };

    const current = ctx.context.assets?.find((e) => e.id === v.data);
    ctx.context.model = current
      ? {
          id: current.id,
          type: current.type,
          name: current.name,
          valuationMode: current.valuationMode,
          currency: current.currency,
          qty: current.qty,
          total: current.total,
          debt: current.debt,
        }
      : undefined;

    return { success: true };
  }

  next(): NextResult<UpdateCommandCtx> {
    return { done: false as const, page: new AssetOptionPage() };
  }
}

export class AssetOptionPage implements Page<UpdateCommandCtx> {
  render(ctx: UpdateCommandCtx, error?: string): ViewModel {
    const nodes: ViewModel['nodes'] = [];
    nodes.push({ type: 'Title' as const, text: '‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫—Ç–∏–≤–æ–º' });

    if (ctx.context.model?.valuationMode === ValuationMode.MARKET) {
      nodes.push({
        type: 'Paragraph' as const,
        text:
          `–ê–∫—Ç–∏–≤: ${ctx.context.model?.name}\n` +
          `–í–∞–ª—é—Ç–∞: ${ctx.context.model?.currency}\n` +
          `–ö–æ–ª-–≤–æ: ${ctx.context.model?.qty}`,
      });
    } else {
      nodes.push({
        type: 'Paragraph' as const,
        text:
          `–ê–∫—Ç–∏–≤: ${ctx.context.model?.name}\n` +
          `–í–∞–ª—é—Ç–∞ –æ—Ü–µ–Ω–∫–∏: ${ctx.context.model?.currency}\n` +
          `–°—É–º–º–∞ –æ—Ü–µ–Ω–∫–∏: ${ctx.context.model?.total}\n` +
          `–î–æ–ª–≥ –ø–æ –æ—Ü–µ–Ω–∫–µ: ${ctx.context.model?.debt}`,
      });
    }

    nodes.push({
      type: 'Keyboard' as const,
      rows: [
        [{ text: '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å', cb: UpdateMenuAction.UPDATE }],
        [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', cb: UpdateMenuAction.DELETE }],
      ],
    });

    if (error) nodes.push({ type: 'Error' as const, text: error });
    return { nodes };
  }

  handleInput(ctx: UpdateCommandCtx, input: string): Result {
    const v = UpdateMenuActionSchema.safeParse(input);
    if (!v.success) return { success: false, message: prettyZodError(v.error) };
    ctx.context.action = v.data;
    return { success: true };
  }

  async next(ctx: UpdateCommandCtx): Promise<NextResult<UpdateCommandCtx>> {
    if (ctx.context.action === UpdateMenuAction.UPDATE) {
      if (ctx.context.model?.valuationMode === ValuationMode.MARKET) {
        return { done: false as const, page: new UpdateQtyPage() };
      }
      if (ctx.context.model?.valuationMode === ValuationMode.MANUAL) {
        return { done: false as const, page: new UpdateTotalPage() };
      }
    }

    if (ctx.context.action === UpdateMenuAction.DELETE) {
      await db.asset.delete({ where: { id: ctx.context.model!.id } });

      ctx.ui?.show?.(`üóëÔ∏è –ê–∫—Ç–∏–≤ ¬´${ctx.context.model?.name}¬ª —É–¥–∞–ª—ë–Ω`);
    }

    return { done: true };
  }
}

export class UpdateQtyPage implements Page<UpdateCommandCtx> {
  render(ctx: UpdateCommandCtx, error?: string): ViewModel {
    const m = ctx.context.model!;
    const nodes: ViewModel['nodes'] = [
      { type: 'Title' as const, text: '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
      {
        type: 'FormRow' as const,
        label: '–ö–æ–ª-–≤–æ',
        value: undefined,
        state: 'fill' as const,
      },
    ];
    if (error) nodes.push({ type: 'Error' as const, text: error });
    nodes.push({ type: 'Prompt' as const, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üëá' });
    return { nodes };
  }

  handleInput(ctx: UpdateCommandCtx, input: string): Result {
    const v = DecimalPositiveSchema.safeParse(input);
    if (!v.success) return { success: false, message: prettyZodError(v.error) };
    ctx.context.model!.qty = new Prisma.Decimal(v.data);
    return { success: true };
  }

  async next(ctx: UpdateCommandCtx): Promise<NextResult<UpdateCommandCtx>> {
    const m = ctx.context.model!;
    await db.asset.update({
      where: {
        id: m.id,
      },
      data: {
        name: m.name,
        currency: m.currency,
        valuationMode: m.valuationMode,
        qty: m.qty,
        total: m.total,
        debt: m.debt,
      },
    });
    ctx.ui?.show?.(`‚úÖ ¬´${m.name}¬ª: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${m.qty} ${m.currency}`);
    return { done: true };
  }
}

export class UpdateTotalPage implements Page<UpdateCommandCtx> {
  render(ctx: UpdateCommandCtx, error?: string): ViewModel {
    const nodes: ViewModel['nodes'] = [
      { type: 'Title' as const, text: '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É –æ—Ü–µ–Ω–∫–∏' },
      {
        type: 'FormRow' as const,
        label: '–°—É–º–º–∞ –æ—Ü–µ–Ω–∫–∏',
        value: undefined,
        state: 'fill' as const,
      },
      {
        type: 'FormRow' as const,
        label: '–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞',
        value: undefined,
        state: 'not' as const,
      },
    ];
    if (error) nodes.push({ type: 'Error' as const, text: error });
    nodes.push({ type: 'Prompt' as const, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –æ—Ü–µ–Ω–∫–∏ üëá' });
    return { nodes };
  }

  handleInput(ctx: UpdateCommandCtx, input: string): Result {
    const v = DecimalPositiveSchema.safeParse(input);
    if (!v.success) return { success: false, message: prettyZodError(v.error) };
    ctx.context.model!.total = new Prisma.Decimal(v.data);
    return { success: true };
  }

  next(): NextResult<UpdateCommandCtx> {
    return { done: false as const, page: new UpdateDebtPage() };
  }
}

export class UpdateDebtPage implements Page<UpdateCommandCtx> {
  render(ctx: UpdateCommandCtx, error?: string): ViewModel {
    const m = ctx.context.model!;
    const nodes: ViewModel['nodes'] = [
      { type: 'Title' as const, text: '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞' },
      {
        type: 'FormRow' as const,
        label: '–°—É–º–º–∞ –æ—Ü–µ–Ω–∫–∏',
        value: new Prisma.Decimal(m.total!),
        state: 'ok' as const,
      },
      {
        type: 'FormRow' as const,
        label: '–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞',
        value: undefined,
        state: 'fill' as const,
      },
    ];
    if (error) nodes.push({ type: 'Error' as const, text: error });
    nodes.push({ type: 'Prompt' as const, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ üëá' });
    return { nodes };
  }

  handleInput(ctx: UpdateCommandCtx, input: string): Result {
    const v = DecimalNonNegSchema.safeParse(input);
    if (!v.success) return { success: false, message: prettyZodError(v.error) };
    ctx.context.model!.debt = new Prisma.Decimal(v.data);
    return { success: true };
  }

  async next(ctx: UpdateCommandCtx): Promise<NextResult<UpdateCommandCtx>> {
    const m = ctx.context.model!;
    await db.asset.update({
      where: {
        id: m.id,
      },
      data: {
        name: m.name,
        currency: m.currency,
        valuationMode: m.valuationMode,
        qty: m.qty,
        total: m.total,
        debt: m.debt,
      },
    });
    ctx.ui?.show?.(`‚úÖ ¬´${m.name}¬ª: –¥–æ–ª–≥/–æ—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚Üí ${m.debt}/${m.total} ${m.currency}`);
    return { done: true };
  }
}
