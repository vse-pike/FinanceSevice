import { AssetType, ValuationMode } from '@prisma/client';
import { AddAssetModel } from '../context.js';

const AssetTypeLabel: Record<AssetType, string> = {
  FIAT: '–§–∏–∞—Ç–Ω—ã–µ —Å—á–µ—Ç–∞',
  CRYPTO: '–ö—Ä–∏–ø—Ç–æ—Å—á–µ—Ç–∞',
  STOCK: '–ê–∫—Ü–∏–∏',
  RE: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
  DEBT: '–ó–∞–π–º—ã',
  COMMODITY: '–¢–æ–≤–∞—Ä',
};

export function renderSummary(model: AddAssetModel, currentKey?: keyof AddAssetModel): string {
  const rows: Array<{
    label: string;
    key: keyof AddAssetModel;
    visible: boolean;
    fmt?: (v: any) => string;
  }> = [
    { label: '–ù–∞–∑–≤–∞–Ω–∏–µ', key: 'name', visible: true },
    { label: '–¢–∏–ø', key: 'type', visible: true, fmt: (v: AssetType) => AssetTypeLabel[v] },
    {
      label: '–í–∞–ª—é—Ç–∞',
      key: 'currency',
      visible: model.valuationMode !== ValuationMode.MANUAL,
    },
    {
      label: '–í–∞–ª—é—Ç–∞ –æ—Ü–µ–Ω–∫–∏',
      key: 'currency',
      visible: model.valuationMode == ValuationMode.MANUAL,
    },
    {
      label: '–ö–æ–ª-–≤–æ',
      key: 'qty',
      visible: model.valuationMode !== ValuationMode.MANUAL,
      fmt: (v) => String(v),
    },
    {
      label: '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –æ—Ü–µ–Ω–∫–µ',
      key: 'total',
      visible: model.valuationMode == ValuationMode.MANUAL,
      fmt: (v) => String(v),
    },
    {
      label: '–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞ –ø–æ –æ—Ü–µ–Ω–∫–µ',
      key: 'debt',
      visible: model.valuationMode == ValuationMode.MANUAL,
      fmt: (v) => String(v),
    },
  ];

  const ICON = { not: '‚úñÔ∏è', fill: 'üëâ', ok: '‚úÖ' };
  const PH = { not: '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ', fill: '–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è' };

  const out: string[] = ['–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞', ''];

  for (const r of rows) {
    if (!r.visible) continue;

    const filled = model[r.key] !== undefined;
    const filling = !filled && r.key === currentKey;

    const icon = filled ? ICON.ok : filling ? ICON.fill : ICON.not;
    const ph = filling ? PH.fill : PH.not;

    const raw = model[r.key];
    const val = raw === undefined ? ph : r.fmt ? r.fmt(raw) : String(raw);
    out.push(`${icon} ${r.label}: [${val}]`);
  }

  return out.join('\n');
}
