generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ——— справочники ———
enum AssetType {
  FIAT
  CRYPTO
  STOCK
  RE
  DEBT
  COMMODITY
}

enum ValuationMode {
  MARKET
  MANUAL
}

// ——— пользователи ———
model User {
  id         String   @id @default(uuid())
  telegramId BigInt   @unique
  username   String
  createdAt  DateTime @default(now())
  assets     Asset[]
}

// ——— актив ———
// qty есть всегда; оценка либо MARKET (цена с провайдера), либо MANUAL (хранимая).
// долг влияет только на net (equity), не на gross.
model Asset {
  id       String    @id @default(uuid())
  userId   String
  name     String
  type     AssetType
  currency String
  qty      Decimal   @db.Decimal(38, 12)

  valuationMode ValuationMode @default(MARKET)
  // MANUAL-оценка
  total         Decimal?      @db.Decimal(38, 2)
  // долг по активу (ипотека/кредит): влияет на net, не на gross
  debt          Decimal?      @db.Decimal(38, 2)

  createdAt DateTime @default(now())

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  commits   AssetCommit[]
  snapshots DailySnapshot[]

  @@unique([userId, name])
  @@index([userId])
}

// ——— коммиты изменений состояния ———
model AssetCommit {
  id        String   @id @default(uuid())
  assetId   String
  timestamp DateTime @default(now())

  qty   Decimal  @db.Decimal(38, 12)
  total Decimal? @db.Decimal(38, 2)
  debt  Decimal? @db.Decimal(38, 2)

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, timestamp])
}

// ——— ежедневные снапшоты ———
model DailySnapshot {
  userAssetId String
  date        DateTime
  qty         Decimal  @db.Decimal(38, 12)

  valuesJson Json
  metaJson   Json?

  asset Asset @relation(fields: [userAssetId], references: [id], onDelete: Cascade)

  @@id([userAssetId, date])
  @@index([date])
}
